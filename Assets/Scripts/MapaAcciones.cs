//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/MapaAcciones.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MapaAcciones: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MapaAcciones()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MapaAcciones"",
    ""maps"": [
        {
            ""name"": ""Jugador1"",
            ""id"": ""e0a06517-5a65-4dec-a580-e7d2434a1ec7"",
            ""actions"": [
                {
                    ""name"": ""Movimiento"",
                    ""type"": ""Value"",
                    ""id"": ""1be99551-a330-4c0f-a791-b68547cbc783"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interactuar"",
                    ""type"": ""Button"",
                    ""id"": ""3fe3d05e-7b95-4326-b75a-879fd66175d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MandarCoche"",
                    ""type"": ""Button"",
                    ""id"": ""0fca3780-5b3d-4c1b-8ea6-03872b083c97"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c00a98b3-6564-411f-a8cd-1a6b26da3f20"",
                    ""path"": ""<DualShockGamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4fefe7a-9381-4f12-ad38-c91908b03a21"",
                    ""path"": ""<DualShockGamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""Interactuar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2bf47cf7-88a5-43f0-a98d-1cbb5ee2188d"",
                    ""path"": ""<DualShockGamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control"",
                    ""action"": ""MandarCoche"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Control"",
            ""bindingGroup"": ""Control"",
            ""devices"": [
                {
                    ""devicePath"": ""<DualShockGamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Jugador1
        m_Jugador1 = asset.FindActionMap("Jugador1", throwIfNotFound: true);
        m_Jugador1_Movimiento = m_Jugador1.FindAction("Movimiento", throwIfNotFound: true);
        m_Jugador1_Interactuar = m_Jugador1.FindAction("Interactuar", throwIfNotFound: true);
        m_Jugador1_MandarCoche = m_Jugador1.FindAction("MandarCoche", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Jugador1
    private readonly InputActionMap m_Jugador1;
    private List<IJugador1Actions> m_Jugador1ActionsCallbackInterfaces = new List<IJugador1Actions>();
    private readonly InputAction m_Jugador1_Movimiento;
    private readonly InputAction m_Jugador1_Interactuar;
    private readonly InputAction m_Jugador1_MandarCoche;
    public struct Jugador1Actions
    {
        private @MapaAcciones m_Wrapper;
        public Jugador1Actions(@MapaAcciones wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movimiento => m_Wrapper.m_Jugador1_Movimiento;
        public InputAction @Interactuar => m_Wrapper.m_Jugador1_Interactuar;
        public InputAction @MandarCoche => m_Wrapper.m_Jugador1_MandarCoche;
        public InputActionMap Get() { return m_Wrapper.m_Jugador1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Jugador1Actions set) { return set.Get(); }
        public void AddCallbacks(IJugador1Actions instance)
        {
            if (instance == null || m_Wrapper.m_Jugador1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Jugador1ActionsCallbackInterfaces.Add(instance);
            @Movimiento.started += instance.OnMovimiento;
            @Movimiento.performed += instance.OnMovimiento;
            @Movimiento.canceled += instance.OnMovimiento;
            @Interactuar.started += instance.OnInteractuar;
            @Interactuar.performed += instance.OnInteractuar;
            @Interactuar.canceled += instance.OnInteractuar;
            @MandarCoche.started += instance.OnMandarCoche;
            @MandarCoche.performed += instance.OnMandarCoche;
            @MandarCoche.canceled += instance.OnMandarCoche;
        }

        private void UnregisterCallbacks(IJugador1Actions instance)
        {
            @Movimiento.started -= instance.OnMovimiento;
            @Movimiento.performed -= instance.OnMovimiento;
            @Movimiento.canceled -= instance.OnMovimiento;
            @Interactuar.started -= instance.OnInteractuar;
            @Interactuar.performed -= instance.OnInteractuar;
            @Interactuar.canceled -= instance.OnInteractuar;
            @MandarCoche.started -= instance.OnMandarCoche;
            @MandarCoche.performed -= instance.OnMandarCoche;
            @MandarCoche.canceled -= instance.OnMandarCoche;
        }

        public void RemoveCallbacks(IJugador1Actions instance)
        {
            if (m_Wrapper.m_Jugador1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IJugador1Actions instance)
        {
            foreach (var item in m_Wrapper.m_Jugador1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Jugador1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Jugador1Actions @Jugador1 => new Jugador1Actions(this);
    private int m_ControlSchemeIndex = -1;
    public InputControlScheme ControlScheme
    {
        get
        {
            if (m_ControlSchemeIndex == -1) m_ControlSchemeIndex = asset.FindControlSchemeIndex("Control");
            return asset.controlSchemes[m_ControlSchemeIndex];
        }
    }
    public interface IJugador1Actions
    {
        void OnMovimiento(InputAction.CallbackContext context);
        void OnInteractuar(InputAction.CallbackContext context);
        void OnMandarCoche(InputAction.CallbackContext context);
    }
}
